[["0",{"pageContent":"content: asdkjaslkdj laksjd skljdakdsakldjaldjaslkdjk lsajd","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["1",{"pageContent":"content: opopopalskjd alkjdskadj skajdsakldjlkdjasdakdjaldj klajsd","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["2",{"pageContent":"content: jhkjhkjhasjdhakjdhaskjdhkashjhkjhkjhasjdhakjdhaskjdhkashjhkjhkjhasjdhakjdhaskjdhkash","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["3",{"pageContent":"content: jhkjhkjhasjdhakjdhaskjdhkashjhkjhkjhasjdhakjdhaskjdhkashjhkjhkjhasjdhakjdhaskjdhkash","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["4",{"pageContent":"content: # Using Fetch Api\\n\\nThe Fetch API interface allows web browser to make HTTP requests to web servers.\\n\\nðŸ˜€ No need for XMLHttpRequest anymore.\\n\\n```js:example.js\\nconst res = fetch('http://api.github.com/users')\\n    .then((res)=>res.json())\\n    .then((data)=>console.log(data))\\n```","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["5",{"pageContent":"content: It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["6",{"pageContent":"content: ```js\\ntry {\\n  throw new Error(\"Whoops!\");\\n} catch (e) {\\n  console.error(`${e.name}: ${e.message}`);\\n}\\n```","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["7",{"pageContent":"content: This is <span className=\"shortCode \">Important</span> Concept for javascsript\\n```js\\nconsole.log('welcome')\\n```","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["8",{"pageContent":"content: > **NOTE:** \\nMarkdown","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["9",{"pageContent":"content: This is <span className=\"shortCode \">Important</span> Some Markdown text with  \\n\\n```html\\n<span style=\"color:blue\">some blue text</span>\\n```\\n","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["10",{"pageContent":"content: lkajsdklajsdlkajdlkasjdlkajskdlkajsdklajsdlkajdlkasjdlkajskdlkajsdklajsdlkajdlkasjdlkajskdlkajsdklajsdlkajdlkasjdlkajskdlkajsdklajsdlkajdlkasjdlkajskdlkajsdklajsdlkajdlkasjdlkajskd","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["11",{"pageContent":"content: dgdgdgdghhhfhhfhfhfhfhfhffffffffffffffffffffffffffffff","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["12",{"pageContent":"content: To make a fetch API request in JavaScript, you can use the <span className=\"shortCode\">fetch()</span> method. This method allows you to make HTTP requests to a server and handle the response.\\nHere's a basic example of how to use the <span className=\"shortCode\">fetch()</span> API to make a GET request:\\n```js\\nfetch('https://api.example.com/data', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n    'Authorization': 'Bearer YourAccessToken'\\n  },\\n  body: JSON.stringify({ key: 'value' }) // JSON data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["13",{"pageContent":"method. This method allows you to make HTTP requests to a server and handle the response.\\nHere's a basic example of how to use the <span className=\"shortCode\">fetch()</span> API to make a GET request:\\n```js\\nfetch('https://api.example.com/data', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n    'Authorization': 'Bearer YourAccessToken'\\n  },\\n  body: JSON.stringify({ key: 'value' }) // JSON data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["14",{"pageContent":"a basic example of how to use the <span className=\"shortCode\">fetch()</span> API to make a GET request:\\n```js\\nfetch('https://api.example.com/data', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n    'Authorization': 'Bearer YourAccessToken'\\n  },\\n  body: JSON.stringify({ key: 'value' }) // JSON data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["15",{"pageContent":"{\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n    'Authorization': 'Bearer YourAccessToken'\\n  },\\n  body: JSON.stringify({ key: 'value' }) // JSON data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["16",{"pageContent":"YourAccessToken'\\n  },\\n  body: JSON.stringify({ key: 'value' }) // JSON data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["17",{"pageContent":"data to send in the request body\\n})\\n.then(response => {\\n  // Handle the response here\\n})\\n.catch(error => {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["18",{"pageContent":"=> {\\n  console.error('There was a problem with the fetch operation:', error);\\n});\\n```\\n\\n1. We use the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations with it.\\n\\n5. If there's an error at any point in the process (e.g., a network error or a parsing error),","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["19",{"pageContent":"the <span className=\"shortCode\">fetch()</span> function and pass the URL of the API endpoint as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations with it.\\n\\n5. If there's an error at any point in the process (e.g., a network error or a parsing error), we use <span className=\"shortCode\">.catch()</span> to handle and log the error.\\n\\nRemember to","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["20",{"pageContent":"as its parameter.\\n\\n2. <span className=\"shortCode\">fetch()</span> returns a Promise, so we can use <span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations with it.\\n\\n5. If there's an error at any point in the process (e.g., a network error or a parsing error), we use <span className=\"shortCode\">.catch()</span> to handle and log the error.\\n\\nRemember to replace <span className=\"shortCode\">'https://api.example.com/data'</span> with the actual URL of","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["21",{"pageContent":"<span className=\"shortCode\">.then()</span> to handle the response when it's received. Inside the first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations with it.\\n\\n5. If there's an error at any point in the process (e.g., a network error or a parsing error), we use <span className=\"shortCode\">.catch()</span> to handle and log the error.\\n\\nRemember to replace <span className=\"shortCode\">'https://api.example.com/data'</span> with the actual URL of the API you want to fetch data from, and customize the headers, request method, and request body as","metadata":{"loc":{"lines":{"from":1,"to":1}}}}],["22",{"pageContent":"first <span className=\"shortCode\">.then()</span>, we check if the response was successful (status code 200-299) using response.ok. If it's not, we throw an error.\\n\\n3. If the response is OK, we use response.json() to parse the response data as JSON. If the response is in a different format, like text or XML, you would use response.text() or response.xml() accordingly.\\n\\n4. In the second <span className=\"shortCode\">.then()</span>, we handle the JSON data and can perform any necessary operations with it.\\n\\n5. If there's an error at any point in the process (e.g., a network error or a parsing error), we use <span className=\"shortCode\">.catch()</span> to handle and log the error.\\n\\nRemember to replace <span className=\"shortCode\">'https://api.example.com/data'</span> with the actual URL of the API you want to fetch data from, and customize the headers, request method, and request body as needed for your specific use case.\\n\\n","metadata":{"loc":{"lines":{"from":1,"to":1}}}}]]